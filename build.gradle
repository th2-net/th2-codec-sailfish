plugins {
    id "org.jetbrains.kotlin.jvm" version "1.8.22"
    id "org.jetbrains.kotlin.kapt" version "1.8.22"
    id("java-library")
    id("maven-publish")

    id "com.exactpro.th2.gradle.publish" version "0.1.1"
}

ext {
    genDir = file('src/gen')
    sailfishVersion = '3.3.202'
    excludeSailfish = { rcd ->
        rcd.excludeModule("com.exactpro.sf", "sailfish-core")
        rcd.excludeModule("com.exactpro.sf", "sailfish-common")
        rcd.excludeModule("com.exactpro.sf", "sailfish-rest-api-client")
        rcd.excludeModule("com.exactpro.sf", "service-http")
    }
}

group 'com.exactpro.th2'
version release_version

kotlin {
    jvmToolchain(11)
}

ext.excludeSailfish = { rcd ->
    rcd.excludeModule("com.exactpro.sf", "sailfish-core")
    rcd.excludeModule("com.exactpro.sf", "sailfish-common")
    rcd.excludeModule("com.exactpro.sf", "sailfish-rest-api-client")
    rcd.excludeModule("com.exactpro.sf", "service-http")
}

repositories {
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        content {
            excludeSailfish(it)
        }
    }
    // ignoreGradleMetadataRedirection is used for sonatype because
    // Sailfish dependencies have constrains that interfere with our BOM
    // so we exclude Gradle metadata for this repositories.
    // We've checked these versions - they are compatible and safe to use
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
        content {
            excludeSailfish(it)
        }
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }
    mavenCentral()
    mavenLocal()

    configurations.configureEach {
        resolutionStrategy {
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        }
    }
}

configurations {
    implementation {
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-yaml' // because of the vulnerability
        exclude group: 'junit', module: 'junit' // because of the vulnerability
    }
}

dependencies {
    implementation('com.exactpro.th2:common:5.10.1-dev') {
        because('sending to direct queues')
        exclude group: 'com.exactpro.th2', module: 'task-utils'
    }

    implementation 'com.exactpro.th2:codec:5.5.0-dev'
    implementation 'com.exactpro.th2:common-utils:2.2.3-dev'
    implementation 'com.exactpro.th2:sailfish-utils:4.1.1-dev'
    implementation "com.exactpro.sf:sailfish-core:${sailfishVersion}"

    compileOnly 'com.google.auto.service:auto-service-annotations:1.1.1'
    kapt 'com.google.auto.service:auto-service:1.1.1'

    testCompileOnly 'com.google.auto.service:auto-service-annotations:1.1.1'
    kaptTest 'com.google.auto.service:auto-service:1.1.1'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.3.1'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

dependencyCheck {
    suppressionFile = file('suppressions.xml')
}